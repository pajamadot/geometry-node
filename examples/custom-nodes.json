{
  "version": "1.0.0",
  "created": "2024-01-01T00:00:00.000Z",
  "modified": "2024-01-01T00:00:00.000Z",
  "nodes": [
    {
      "type": "double-number",
      "name": "Double Number",
      "description": "Multiplies input number by 2",
      "category": "math",
      "color": {
        "primary": "#22c55e",
        "secondary": "#16a34a"
      },
      "inputs": [
        {
          "id": "value",
          "name": "Value",
          "type": "number",
          "defaultValue": 1,
          "description": "Number to double"
        }
      ],
      "outputs": [
        {
          "id": "result",
          "name": "Result",
          "type": "number",
          "description": "Doubled value"
        }
      ],
      "parameters": [],
      "executeCode": "const value = inputs.value || 0;\nreturn { result: value * 2 };",
      "ui": {
        "width": 180,
        "icon": "calculator"
      },
      "version": "1.0.0",
      "author": "Example",
      "created": "2024-01-01T00:00:00.000Z",
      "tags": ["math", "simple", "example"]
    },
    {
      "type": "random-position",
      "name": "Random Position",
      "description": "Generates random 3D positions within bounds",
      "category": "utilities",
      "color": {
        "primary": "#6366f1",
        "secondary": "#4f46e5"
      },
      "inputs": [
        {
          "id": "seed",
          "name": "Seed",
          "type": "integer",
          "defaultValue": 0,
          "description": "Random seed for reproducibility"
        }
      ],
      "outputs": [
        {
          "id": "position",
          "name": "Position",
          "type": "vector",
          "description": "Random position vector"
        }
      ],
      "parameters": [
        {
          "id": "minX",
          "name": "Min X",
          "type": "number",
          "defaultValue": -5,
          "description": "Minimum X coordinate"
        },
        {
          "id": "maxX",
          "name": "Max X",
          "type": "number",
          "defaultValue": 5,
          "description": "Maximum X coordinate"
        },
        {
          "id": "minY",
          "name": "Min Y",
          "type": "number",
          "defaultValue": -5,
          "description": "Minimum Y coordinate"
        },
        {
          "id": "maxY",
          "name": "Max Y",
          "type": "number",
          "defaultValue": 5,
          "description": "Maximum Y coordinate"
        },
        {
          "id": "minZ",
          "name": "Min Z",
          "type": "number",
          "defaultValue": -5,
          "description": "Minimum Z coordinate"
        },
        {
          "id": "maxZ",
          "name": "Max Z",
          "type": "number",
          "defaultValue": 5,
          "description": "Maximum Z coordinate"
        }
      ],
      "executeCode": "// Get seed and parameters\nconst seed = inputs.seed || 0;\nconst minX = parameters.minX || -5;\nconst maxX = parameters.maxX || 5;\nconst minY = parameters.minY || -5;\nconst maxY = parameters.maxY || 5;\nconst minZ = parameters.minZ || -5;\nconst maxZ = parameters.maxZ || 5;\n\n// Simple seeded random function\nfunction seededRandom(seed) {\n  const x = Math.sin(seed) * 10000;\n  return x - Math.floor(x);\n}\n\n// Generate random position\nconst x = minX + seededRandom(seed + 1) * (maxX - minX);\nconst y = minY + seededRandom(seed + 2) * (maxY - minY);\nconst z = minZ + seededRandom(seed + 3) * (maxZ - minZ);\n\nreturn { position: { x, y, z } };",
      "ui": {
        "width": 220,
        "icon": "zap",
        "advanced": ["minX", "maxX", "minY", "maxY", "minZ", "maxZ"]
      },
      "version": "1.0.0",
      "author": "Example",
      "created": "2024-01-01T00:00:00.000Z",
      "tags": ["utility", "random", "position", "vector"]
    },
    {
      "type": "lerp-number",
      "name": "Lerp Number",
      "description": "Linear interpolation between two numbers",
      "category": "math",
      "color": {
        "primary": "#16a34a",
        "secondary": "#15803d"
      },
      "inputs": [
        {
          "id": "from",
          "name": "From",
          "type": "number",
          "defaultValue": 0,
          "description": "Start value"
        },
        {
          "id": "to",
          "name": "To",
          "type": "number",
          "defaultValue": 1,
          "description": "End value"
        },
        {
          "id": "t",
          "name": "T",
          "type": "number",
          "defaultValue": 0.5,
          "min": 0,
          "max": 1,
          "step": 0.01,
          "description": "Interpolation factor (0-1)"
        }
      ],
      "outputs": [
        {
          "id": "result",
          "name": "Result",
          "type": "number",
          "description": "Interpolated value"
        }
      ],
      "parameters": [],
      "executeCode": "const from = inputs.from || 0;\nconst to = inputs.to || 1;\nconst t = Math.max(0, Math.min(1, inputs.t || 0.5));\n\nconst result = from + (to - from) * t;\n\nreturn { result };",
      "ui": {
        "width": 180,
        "icon": "calculator"
      },
      "version": "1.0.0",
      "author": "Example",
      "created": "2024-01-01T00:00:00.000Z",
      "tags": ["math", "interpolation", "lerp"]
    },
    {
      "type": "color-mixer",
      "name": "Color Mixer",
      "description": "Mixes two colors with adjustable ratio",
      "category": "utilities",
      "color": {
        "primary": "#ec4899",
        "secondary": "#be185d"
      },
      "inputs": [
        {
          "id": "colorA",
          "name": "Color A",
          "type": "color",
          "defaultValue": "#ff0000",
          "description": "First color"
        },
        {
          "id": "colorB",
          "name": "Color B",
          "type": "color",
          "defaultValue": "#0000ff",
          "description": "Second color"
        },
        {
          "id": "ratio",
          "name": "Ratio",
          "type": "number",
          "defaultValue": 0.5,
          "min": 0,
          "max": 1,
          "step": 0.01,
          "description": "Mix ratio (0 = A, 1 = B)"
        }
      ],
      "outputs": [
        {
          "id": "color",
          "name": "Color",
          "type": "color",
          "description": "Mixed color result"
        }
      ],
      "parameters": [],
      "executeCode": "// Helper function to parse color\nfunction parseColor(color) {\n  if (typeof color === 'string' && color.startsWith('#')) {\n    const r = parseInt(color.slice(1, 3), 16) / 255;\n    const g = parseInt(color.slice(3, 5), 16) / 255;\n    const b = parseInt(color.slice(5, 7), 16) / 255;\n    return { r, g, b };\n  }\n  return { r: 1, g: 0, b: 0 }; // default red\n}\n\n// Helper function to format color\nfunction formatColor(r, g, b) {\n  const toHex = (c) => Math.round(c * 255).toString(16).padStart(2, '0');\n  return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\n// Get inputs\nconst colorA = parseColor(inputs.colorA || '#ff0000');\nconst colorB = parseColor(inputs.colorB || '#0000ff');\nconst ratio = Math.max(0, Math.min(1, inputs.ratio || 0.5));\n\n// Mix colors\nconst r = colorA.r + (colorB.r - colorA.r) * ratio;\nconst g = colorA.g + (colorB.g - colorA.g) * ratio;\nconst b = colorA.b + (colorB.b - colorA.b) * ratio;\n\nconst mixedColor = formatColor(r, g, b);\n\nreturn { color: mixedColor };",
      "ui": {
        "width": 200,
        "icon": "code"
      },
      "version": "1.0.0",
      "author": "Example",
      "created": "2024-01-01T00:00:00.000Z",
      "tags": ["color", "mixer", "utility"]
    },
    {
      "type": "wave-generator",
      "name": "Wave Generator",
      "description": "Generates various wave patterns",
      "category": "animation",
      "color": {
        "primary": "#f59e0b",
        "secondary": "#d97706"
      },
      "inputs": [
        {
          "id": "time",
          "name": "Time",
          "type": "number",
          "defaultValue": 0,
          "description": "Time input"
        }
      ],
      "outputs": [
        {
          "id": "value",
          "name": "Value",
          "type": "number",
          "description": "Wave value"
        }
      ],
      "parameters": [
        {
          "id": "waveType",
          "name": "Wave Type",
          "type": "select",
          "defaultValue": "sine",
          "options": ["sine", "cosine", "triangle", "square", "sawtooth"],
          "description": "Type of wave to generate"
        },
        {
          "id": "frequency",
          "name": "Frequency",
          "type": "number",
          "defaultValue": 1,
          "min": 0.1,
          "max": 10,
          "step": 0.1,
          "description": "Wave frequency"
        },
        {
          "id": "amplitude",
          "name": "Amplitude",
          "type": "number",
          "defaultValue": 1,
          "min": 0.1,
          "max": 10,
          "step": 0.1,
          "description": "Wave amplitude"
        },
        {
          "id": "offset",
          "name": "Offset",
          "type": "number",
          "defaultValue": 0,
          "min": -10,
          "max": 10,
          "step": 0.1,
          "description": "Wave offset"
        }
      ],
      "executeCode": "const time = inputs.time || 0;\nconst waveType = parameters.waveType || 'sine';\nconst frequency = parameters.frequency || 1;\nconst amplitude = parameters.amplitude || 1;\nconst offset = parameters.offset || 0;\n\nconst t = time * frequency;\nlet value = 0;\n\nswitch (waveType) {\n  case 'sine':\n    value = Math.sin(t);\n    break;\n  case 'cosine':\n    value = Math.cos(t);\n    break;\n  case 'triangle':\n    value = (2 / Math.PI) * Math.asin(Math.sin(t));\n    break;\n  case 'square':\n    value = Math.sin(t) > 0 ? 1 : -1;\n    break;\n  case 'sawtooth':\n    value = 2 * (t / (2 * Math.PI) - Math.floor(t / (2 * Math.PI) + 0.5));\n    break;\n  default:\n    value = Math.sin(t);\n}\n\nvalue = value * amplitude + offset;\n\nreturn { value };",
      "ui": {
        "width": 220,
        "icon": "zap",
        "advanced": ["frequency", "amplitude", "offset"]
      },
      "version": "1.0.0",
      "author": "Example",
      "created": "2024-01-01T00:00:00.000Z",
      "tags": ["animation", "wave", "generator", "math"]
    }
  ]
} 